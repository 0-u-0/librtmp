RTMP Dump v2.0
(C) 2009 Andrej Stepanchuk
(C) 2009 Howard Chu
License: GPLv2

To compile type "make" with your platform name, e.g.

  $ make linux

or osx, mingw, or cygwin.

You can cross-compile for ARM using

  $ make arm

but you may need to override the CROSS_COMPILE and INC variables, e.g.

  $ make arm CROSS_COMPILE=arm-none-linux- INC=-I/my/cross/includes

Please read the Makefile to see what other make variables are used.

This code also requires you to have OpenSSL and zlib installed.


SWF Verification
----------------

Download the swf player you want to use for SWFVerification, unzip it using

 $ flasm -x file.swf

It will show the decompressed filesize, use it for --swfsize

Now generate the hash

 $ openssl sha -sha256 -hmac "Genuine Adobe Flash Player 001" file.swf

and use the --swfhash "01234..." option to pass it.

e.g. $ ./rtmpdump --swfhash "123456..." --swfsize 987...

Note: all of this is now done automatically if you provide the SWF URL using
the -W (--swfVfy) option instead of the -s (--swfUrl) option. Also, the hash info
is cached in ~/.swfinfo so it doesn't need to be recalculated all the time.

Building OpenSSL 0.9.8k
-----------------------
arm:
./Configure -DL_ENDIAN --prefix=`pwd`/armlibs linux-generic32

Then replace gcc, cc, ar, ranlib in Makefile and crypto/Makefile by arm-linux-* variants  and use make && make install_sw

win32:
Try ./Configure mingw --prefix=`pwd`/win32libs -DL_ENDIAN -DOPENSSL_NO_HW
Replace gcc, cc, ... by mingw32-* variants in Makefile and crypto/Makefile
make && make install_sw

OpenSSL cross-compiling can be a difficult beast.


Credit goes to team boxee for the XBMC RTMP code originally used in RTMPDumper.
The current code is based on the XBMC code but rewritten in C by Howard Chu.

RTMP Server
-----------
You can also use "make rtmpsrv" to build a stub server. Note that this is
very incomplete code, and I haven't yet decided whether or not to finish
it. In its current form it is useful for obtaining all the parameters
that a real Flash client would send to an RTMP server, so that they can be
used with rtmpdump.

All you need to do is redirect your Flash clients to the machine running this
server and it will dump out all the connect / play parameters that the Flash
client sent. The simplest way to cause the redirect is by editing /etc/hosts
when you know the hostname of the RTMP server, and point it to localhost while
running rtmpsrv on your machine. (This approach should work on any OS; on
Windows you would edit %SystemRoot%\system32\drivers\etc\hosts.)

On Linux you can also use iptables to redirect all outbound RTMP traffic.
You can do this as root:

iptables -t nat -A OUTPUT -p tcp --dport 1935 -j REDIRECT

In my original plan I would have the transparent proxy running as a special
user (e.g. user "proxy"), and regular Flash clients running as any other user.
In that case the proxy would make the connection to the real RTMP server. The
iptables rule would look like this:

iptables -t nat -A OUTPUT -p tcp --dport 1935 -m owner \! --uid-owner proxy \
 -j REDIRECT

(But the proxying part of the code has not been written, and I'm not sure
it's even needed at this point.)

Using it in this mode takes advantage of the Linux support for IP redirects;
in particular it uses a special getsockopt() call to retrieve the original
destination address of the connection. That way the proxy can create the
real outbound connection without any other help from the user. I'm not aware
of equivalent functionality on BSD, Windows, or any other platform; if you
know how to handle this I'd be interested in hearing about it.
